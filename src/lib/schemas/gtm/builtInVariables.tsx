import { z } from 'zod';

// Enum for built-in variable types
export const BuiltInVariableType = z.enum([
  'advertiserId',
  'advertisingTrackingEnabled',
  'ampBrowserLanguage',
  'ampCanonicalHost',
  'ampCanonicalPath',
  'ampCanonicalUrl',
  'ampClientId',
  'ampClientMaxScrollX',
  'ampClientMaxScrollY',
  'ampClientScreenHeight',
  'ampClientScreenWidth',
  'ampClientScrollX',
  'ampClientScrollY',
  'ampClientTimestamp',
  'ampClientTimezone',
  'ampGtmEvent',
  'ampPageDownloadTime',
  'ampPageLoadTime',
  'ampPageViewId',
  'ampReferrer',
  'ampTitle',
  'ampTotalEngagedTime',
  'appId',
  'appName',
  'appVersionCode',
  'appVersionName',
  'builtInVariableTypeUnspecified',
  'clickClasses',
  'clickElement',
  'clickId',
  'clickTarget',
  'clickText',
  'clickUrl',
  'clientName',
  'containerId',
  'containerVersion',
  'debugMode',
  'deviceName',
  'elementVisibilityFirstTime',
  'elementVisibilityRatio',
  'elementVisibilityRecentTime',
  'elementVisibilityTime',
  'environmentName',
  'errorLine',
  'errorMessage',
  'errorUrl',
  'event',
  'eventName',
  'firebaseEventParameterCampaign',
  'firebaseEventParameterCampaignAclid',
  'firebaseEventParameterCampaignAnid',
  'firebaseEventParameterCampaignClickTimestamp',
  'firebaseEventParameterCampaignContent',
  'firebaseEventParameterCampaignCp1',
  'firebaseEventParameterCampaignGclid',
  'firebaseEventParameterCampaignSource',
  'firebaseEventParameterCampaignTerm',
  'firebaseEventParameterCurrency',
  'firebaseEventParameterDynamicLinkAcceptTime',
  'firebaseEventParameterDynamicLinkLinkid',
  'firebaseEventParameterNotificationMessageDeviceTime',
  'firebaseEventParameterNotificationMessageId',
  'firebaseEventParameterNotificationMessageName',
  'firebaseEventParameterNotificationMessageTime',
  'firebaseEventParameterNotificationTopic',
  'firebaseEventParameterPreviousAppVersion',
  'firebaseEventParameterPreviousOsVersion',
  'firebaseEventParameterPrice',
  'firebaseEventParameterProductId',
  'firebaseEventParameterQuantity',
  'firebaseEventParameterValue',
  'firstPartyServingUrl',
  'formClasses',
  'formElement',
  'formId',
  'formTarget',
  'formText',
  'formUrl',
  'historySource',
  'htmlId',
  'language',
  'newHistoryFragment',
  'newHistoryState',
  'newHistoryUrl',
  'oldHistoryFragment',
  'oldHistoryState',
  'oldHistoryUrl',
  'osVersion',
  'pageHostname',
  'pagePath',
  'pageUrl',
  'platform',
  'queryString',
  'randomNumber',
  'referrer',
  'requestMethod',
  'requestPath',
  'resolution',
  'scrollDepthDirection',
  'scrollDepthThreshold',
  'scrollDepthUnits',
  'sdkVersion',
  'serverPageLocationHostname',
  'serverPageLocationPath',
  'serverPageLocationUrl',
  'videoCurrentTime',
  'videoDuration',
  'videoPercent',
  'videoProvider',
  'videoStatus',
  'videoTitle',
  'videoUrl',
  'videoVisible',
  'visitorRegion',
]);

// Update the schema for Built-In Variable Form
const AccountContainerWorkspaceSchema = z.object({
  accountId: z.string().min(1, 'Account ID is required'),
  containerId: z.string().min(1, 'Container ID is required'),
  workspaceId: z.string().min(1, 'Workspace ID is required'),
});

// Update the schema for Built-In Variable Form
const BuiltInVariableSchema = z.object({
  type: BuiltInVariableType.array().nonempty('At least one type is required'),
  accountContainerWorkspace: z
    .array(AccountContainerWorkspaceSchema)
    .min(1, 'At least one Account-Container-Workspace entry is required'),
});

export const FormCreateAmountSchema = z.object({
  amount: z.number().min(1, 'At least one built-in variable is required'),
});

export const FormSchema = z.object({
  forms: z.array(BuiltInVariableSchema),
});

// Export the type inferred from BuiltInVariableFormSchema for type safety
export type BuiltInVariableFormType = z.infer<typeof FormSchema>;
