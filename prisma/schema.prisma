datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Session {
  id           String  @id @default(cuid())
  userId       String? @map("user_id")
  user         User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  abandonAt    BigInt?
  clientId     String?
  createdAt    BigInt
  expireAt     BigInt
  lastActiveAt BigInt
  status       String?
  updatedAt    BigInt
}

model CheckoutSession {
  id             String       @id
  paymentStatus  String // or some suitable enum type if there's a limited set of possible statuses
  amountTotal    Int
  currency       String
  userId         String       @map("user_id")
  subscriptionId String       @map("subscription_id")
  User           User         @relation(fields: [userId], references: [id])
  Subscription   Subscription @relation(fields: [subscriptionId], references: [id])

  @@index([userId], name: "userId")
  @@index([subscriptionId], name: "subscriptionId")
}

enum Role {
  ADMIN
  USER
}

model User {
  id                 String            @id @default(cuid())
  stripeCustomerId   String?           @unique
  subscriptionId     String?           @unique
  subscriptionStatus String?
  name               String?
  email              String?           @unique
  emailVerified      DateTime?
  image              String?
  role               Role              @default(USER)
  sessions           Session[]
  Customer           Customer[]
  Subscription       Subscription[]
  CheckoutSessions   CheckoutSession[]
  Invoice            Invoice[]
  ProductAccess      ProductAccess[]
  gtm                gtm[]
  ga                 ga[]
}

model Customer {
  id               String    @id @default(cuid()) @map("id")
  stripeCustomerId String    @unique @map("stripe_customer_id")
  userId           String    @map("user_id")
  User             User      @relation(fields: [userId], references: [id])
  Invoices         Invoice[]
}

model Product {
  id            String          @id
  active        Boolean
  name          String
  description   String?
  image         String?
  updated       Int
  metadata      Json?
  Price         Price[]
  Subscriptions Subscription[]
  ProductAccess ProductAccess[]
  TierLimits    TierLimit[]
}

enum PricingType {
  one_time
  recurring
}

enum PricingPlanInterval {
  day
  week
  month
  year
}

model Price {
  id                     String              @id
  productId              String              @map("product_id")
  active                 Boolean
  description            String?
  unitAmount             Int                 @map("unit_amount")
  currency               String
  type                   PricingType
  interval               PricingPlanInterval
  intervalCount          Int                 @map("interval_count")
  recurringInterval      String?
  recurringIntervalCount Int?
  trialPeriodDays        Int                 @map("trial_period_days")
  metadata               Json?
  Product                Product             @relation(fields: [productId], references: [id])
  Subscription           Subscription[]
}

enum SubscriptionStatus {
  trialing
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  unpaid
  paused
}

model Subscription {
  id                 String             @id @default(cuid())
  subId              String             @unique
  userId             String             @map("user_id")
  status             SubscriptionStatus @default(trialing)
  metadata           Json?              @map("metadata")
  priceId            String             @map("price_id")
  productId          String             @map("product_id")
  quantity           Int
  cancelAtPeriodEnd  Boolean            @map("cancel_at_period_end")
  created            DateTime           @map("created") @db.Timestamptz
  currentPeriodStart DateTime           @map("current_period_start") @db.Timestamptz
  currentPeriodEnd   DateTime           @map("current_period_end") @db.Timestamptz
  endedAt            DateTime?          @map("ended_at") @db.Timestamptz
  cancelAt           DateTime?          @map("cancel_at") @db.Timestamptz
  canceledAt         DateTime?          @map("canceled_at") @db.Timestamptz
  trialStart         DateTime?          @map("trial_start") @db.Timestamptz
  trialEnd           DateTime?          @map("trial_end") @db.Timestamptz
  User               User               @relation(fields: [userId], references: [id])
  Price              Price              @relation(fields: [priceId], references: [id])
  Product            Product            @relation(fields: [productId], references: [id])
  CheckoutSession    CheckoutSession[]
  Invoice            Invoice[]
  TierLimits         TierLimit[]

  @@unique([userId, productId])
}

model Feature {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?     @map("description")
  TierLimits  TierLimit[]
}

model TierLimit {
  id             String        @id @default(cuid())
  subscriptionId String?
  createLimit    Int           @default(0)
  createUsage    Int           @default(0)
  updateLimit    Int           @default(0)
  updateUsage    Int           @default(0)
  deleteLimit    Int           @default(0)
  deleteUsage    Int           @default(0)
  productId      String // Foreign key
  featureId      String // Foreign key
  Product        Product       @relation(fields: [productId], references: [id])
  Feature        Feature       @relation(fields: [featureId], references: [id])
  Subscription   Subscription? @relation(fields: [subscriptionId], references: [id])

  @@unique([subscriptionId, featureId])
}

model Invoice {
  id             String       @id
  customerId     String       @map("customer_id")
  subscriptionId String       @map("subscription_id")
  amountPaid     Int          @map("amount_paid")
  amountDue      Int          @map("amount_due")
  currency       String
  status         String
  paid           Boolean
  created        DateTime     @map("created") @db.Timestamptz
  dueDate        DateTime     @map("due_date") @db.Timestamptz
  Customer       Customer     @relation(fields: [customerId], references: [stripeCustomerId])
  Subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  User           User?        @relation(fields: [userId], references: [id])
  userId         String?      @map("user_id")
}

model ProductAccess {
  id        String  @id @default(cuid())
  userId    String? @map("user_id")
  productId String
  granted   Boolean @default(false)
  User      User?   @relation(fields: [userId], references: [id])
  Product   Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model gtm {
  id          String @id @default(cuid())
  userId      String @map("user_id")
  accountId   String @map("account_id")
  containerId String @map("container_id")
  workspaceId String @map("workspace_id")
  User        User   @relation(fields: [userId], references: [id])

  @@unique([userId, accountId, containerId, workspaceId], name: "userId_accountId_containerId_workspaceId")
  @@index([userId], name: "gtmSettingsUserId")
}

model ga {
  id         String @id @default(cuid())
  userId     String @map("user_id")
  accountId  String @map("account_id")
  propertyId String @map("property_id")
  User       User   @relation(fields: [userId], references: [id])

  @@unique([userId, accountId, propertyId], name: "userId_accountId_propertyId")
  @@index([userId], name: "gaSettingsUserId")
}
